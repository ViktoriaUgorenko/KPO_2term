; Listing generated by Microsoft (R) Optimizing Compiler Version 19.38.33135.0 

	TITLE	C:\Users\user\Desktop\ÊÏÎ\lab1òåñò\Debug\main.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?months@@3PAHA					; months
PUBLIC	?visyear@@3_NA					; visyear
PUBLIC	?yearNumber@@3HA				; yearNumber
PUBLIC	?dayNumber@@3HA					; dayNumber
PUBLIC	?monthNumber@@3HA				; monthNumber
PUBLIC	?dayNumberBirthday@@3HA				; dayNumberBirthday
PUBLIC	?monthNumberBirthday@@3HA			; monthNumberBirthday
PUBLIC	?birthdaydays@@3HA				; birthdaydays
PUBLIC	?difference@@3HA				; difference
_BSS	SEGMENT
?visyear@@3_NA DB 01H DUP (?)				; visyear
	ALIGN	4

?yearNumber@@3HA DD 01H DUP (?)				; yearNumber
?dayNumber@@3HA DD 01H DUP (?)				; dayNumber
?monthNumber@@3HA DD 01H DUP (?)			; monthNumber
?dayNumberBirthday@@3HA DD 01H DUP (?)			; dayNumberBirthday
?monthNumberBirthday@@3HA DD 01H DUP (?)		; monthNumberBirthday
?birthdaydays@@3HA DD 01H DUP (?)			; birthdaydays
?difference@@3HA DD 01H DUP (?)				; difference
_BSS	ENDS
msvcjmc	SEGMENT
__6628E330_concurrencysal@h DB 01H
__DD735C24_sal@h DB 01H
__95D07812_vadefs@h DB 01H
__2C966F75_vcruntime@h DB 01H
__C84B2A68_xkeycheck@h DB 01H
__E4981F91_yvals_core@h DB 01H
__53AB384B_limits@h DB 01H
__8AA920FA_climits DB 01H
__1B0272D9_corecrt@h DB 01H
__50BF2FAA_vcruntime_new@h DB 01H
__973DD6D2_vcruntime_new_debug@h DB 01H
__935DC21B_crtdbg@h DB 01H
__EA84BEDA_crtdefs@h DB 01H
__7A2C09FE_use_ansi@h DB 01H
__B806B4B7_yvals@h DB 01H
__BB16330F_corecrt_math@h DB 01H
__3BF2A406_math@h DB 01H
__45DED006_corecrt_malloc@h DB 01H
__13F5961F_stddef@h DB 01H
__FD6DBD68_corecrt_search@h DB 01H
__E2E33A61_corecrt_wstdlib@h DB 01H
__6E5ACABA_stdlib@h DB 01H
__0E460208_cstdlib DB 01H
__81223BB7_xtr1common DB 01H
__2FEC17FD_intrin0@inl@h DB 01H
__F3A907D1_intrin0@h DB 01H
__BFC95293_cmath DB 01H
__44420885_corecrt_stdio_config@h DB 01H
__AB601D8D_corecrt_wstdio@h DB 01H
__C1EC35D3_stdio@h DB 01H
__099E6B1A_cstdio DB 01H
__61CC25A1_errno@h DB 01H
__21B98AC3_vcruntime_string@h DB 01H
__E4C945B4_corecrt_memcpy_s@h DB 01H
__8EAFF484_corecrt_memory@h DB 01H
__6490AEC5_corecrt_wstring@h DB 01H
__E8295E1E_string@h DB 01H
__42D4AAE8_cstring DB 01H
__EF1F6BBA_corecrt_wconio@h DB 01H
__74484FB3_corecrt_wctype@h DB 01H
__3D1D430C_corecrt_wdirect@h DB 01H
__8ECB7138_corecrt_share@h DB 01H
__DB7FEBA6_corecrt_wio@h DB 01H
__9A9F0068_corecrt_wprocess@h DB 01H
__369A9BC3_corecrt_wtime@h DB 01H
__CE789B9D_types@h DB 01H
__9901C817_stat@h DB 01H
__3FCAD62E_wchar@h DB 01H
__9315BD49_cwchar DB 01H
__D0D5387F_iosfwd DB 01H
__AB8DD8A5_cstddef DB 01H
__7CEE9503_initializer_list DB 01H
__EDDD1674_stdint@h DB 01H
__B318E375_cstdint DB 01H
__86E2ECA3_type_traits DB 01H
__394B8783_utility DB 01H
__6CD66C6A___msvc_iter_core@hpp DB 01H
__81056E89_xutility DB 01H
__90A9D9C9_iterator DB 01H
__F7972D0B_share@h DB 01H
__C9486F03___msvc_system_error_abi@hpp DB 01H
__94BF1FE1_cerrno DB 01H
__FA77ED4C_malloc@h DB 01H
__89766DA4_corecrt_terminate@h DB 01H
__597317E9_eh@h DB 01H
__9FD3D380_vcruntime_exception@h DB 01H
__22DBD04C_exception DB 01H
__FFDAFD70___msvc_sanitizer_annotate_container@hpp DB 01H
__B9985323_float@h DB 01H
__7ADAA09D_cfloat DB 01H
__1C3CEDF9_limits DB 01H
__6B6686E8_new DB 01H
__28D75C9A_xatomic@h DB 01H
__53DEE440_xmemory DB 01H
__270D62DC_xstring DB 01H
__AB95EA11_stdexcept DB 01H
__A700C1C1_xcall_once@h DB 01H
__1093A1B8_xerrc@h DB 01H
__0A9237D2_time@h DB 01H
__797ACE9B_ctime DB 01H
__37C18DC8_xtimec@h DB 01H
__1B623E4D_xthreads@h DB 01H
__7709B13B_atomic DB 01H
__185DD3E1_system_error DB 01H
__78388AF5_vcruntime_typeinfo@h DB 01H
__F1DA9D90_typeinfo DB 01H
__A092E177_memory DB 01H
__8CD7B678_xfacet DB 01H
__8B91FF0A___msvc_xlocinfo_types@hpp DB 01H
__1EC467ED_ctype@h DB 01H
__06558CBD_cctype DB 01H
__791C33B7_locale@h DB 01H
__9DEADED9_clocale DB 01H
__EE537E58_xlocinfo DB 01H
__F83316ED_xlocale DB 01H
__D7B6094B_xiosbase DB 01H
__A93552AD_streambuf DB 01H
__66B470FA_xlocnum DB 01H
__93ABBCFE_ios DB 01H
__EB23CC29_ostream DB 01H
__88F3F913_istream DB 01H
__E37C1496_iostream DB 01H
__1255C25E_number1@hpp DB 01H
__0AFD2000_main@cpp DB 01H
msvcjmc	ENDS
_DATA	SEGMENT
?months@@3PAHA DD 01fH					; months
	DD	01cH
	DD	01fH
	DD	01eH
	DD	01fH
	DD	01eH
	DD	01fH
	DD	01fH
	DD	01eH
	DD	01fH
	DD	01eH
	DD	01fH
_DATA	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z	; std::_Narrow_char_traits<char,int>::length
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	?countDay@@YAHHH@Z				; countDay
PUBLIC	?visyears@@YAXXZ				; visyears
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	?number1@@YAXXZ					; number1
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	_main
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_0BO@JNNIMEJO@?$NN?r?n?r?5?c?n?d?5?$PP?b?k?$PP?e?r?q?$PP?5?b?h?q?n?j?n?q?m?$PL?l?6@ ; `string'
PUBLIC	??_C@_0CB@MNDAKAOL@?$NN?r?n?r?5?c?n?d?5?m?e?5?$PP?b?k?$PP?e?r?q?$PP?5?b?h?q?n?j?n?q?m?$PL?l@ ; `string'
PUBLIC	??_C@_0CC@GJFPIFCJ@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@ ; `string'
PUBLIC	??_C@_0DG@IKBFBBFF@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?$OA?x?e?c?n?5?d?m?$PP?5?p?n?f?d?e?m?h@ ; `string'
PUBLIC	??_C@_06LMMEPPLN@?D?e?m?$PM?3?5@		; `string'
PUBLIC	??_C@_07ONJDPLPB@?L?e?q?$PP?v?3?5@		; `string'
PUBLIC	??_C@_05KLMANJHD@?C?n?d?3?5@			; `string'
PUBLIC	??_C@_0BC@HOBKMAEF@?M?e?j?n?p?p?e?j?r?m?$OA?$PP?5?d?$OA?r?$OA@ ; `string'
PUBLIC	??_C@_0BO@CMHEMFCG@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?d?m?$PP?5?b?5?c?n?d?s?3?5@ ; `string'
PUBLIC	??_C@_0BN@PAPBPJDC@?6?Q?e?c?n?d?m?$PP?5?r?b?n?i?5?d?e?m?$PM?5?p?n?f?d?e?m?h?$PP?$CB@ ; `string'
PUBLIC	??_C@_05JAEFPJHO@?5?d?m?e?i@			; `string'
PUBLIC	??_C@_0BM@FJKONNHN@?6?R?b?n?i?5?d?e?m?$PM?5?p?n?f?d?e?m?h?$PP?5?w?e?p?e?g?3?5@ ; `string'
EXTRN	_strlen:PROC
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__imp__setlocale:PROC
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	__imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BM@FJKONNHN@?6?R?b?n?i?5?d?e?m?$PM?5?p?n?f?d?e?m?h?$PP?5?w?e?p?e?g?3?5@
CONST	SEGMENT
??_C@_0BM@FJKONNHN@?6?R?b?n?i?5?d?e?m?$PM?5?p?n?f?d?e?m?h?$PP?5?w?e?p?e?g?3?5@ DB 0aH
	DB	0d2H, 0e2H, 0eeH, 0e9H, ' ', 0e4H, 0e5H, 0edH, 0fcH, ' ', 0f0H
	DB	0eeH, 0e6H, 0e4H, 0e5H, 0edH, 0e8H, 0ffH, ' ', 0f7H, 0e5H, 0f0H
	DB	0e5H, 0e7H, ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05JAEFPJHO@?5?d?m?e?i@
CONST	SEGMENT
??_C@_05JAEFPJHO@?5?d?m?e?i@ DB ' ', 0e4H, 0edH, 0e5H, 0e9H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PAPBPJDC@?6?Q?e?c?n?d?m?$PP?5?r?b?n?i?5?d?e?m?$PM?5?p?n?f?d?e?m?h?$PP?$CB@
CONST	SEGMENT
??_C@_0BN@PAPBPJDC@?6?Q?e?c?n?d?m?$PP?5?r?b?n?i?5?d?e?m?$PM?5?p?n?f?d?e?m?h?$PP?$CB@ DB 0aH
	DB	0d1H, 0e5H, 0e3H, 0eeH, 0e4H, 0edH, 0ffH, ' ', 0f2H, 0e2H, 0eeH
	DB	0e9H, ' ', 0e4H, 0e5H, 0edH, 0fcH, ' ', 0f0H, 0eeH, 0e6H, 0e4H
	DB	0e5H, 0edH, 0e8H, 0ffH, '!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CMHEMFCG@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?d?m?$PP?5?b?5?c?n?d?s?3?5@
CONST	SEGMENT
??_C@_0BO@CMHEMFCG@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?d?m?$PP?5?b?5?c?n?d?s?3?5@ DB 0cfH
	DB	0eeH, 0f0H, 0ffH, 0e4H, 0eaH, 0eeH, 0e2H, 0fbH, 0e9H, ' ', 0edH
	DB	0eeH, 0ecH, 0e5H, 0f0H, ' ', 0e4H, 0edH, 0ffH, ' ', 0e2H, ' ', 0e3H
	DB	0eeH, 0e4H, 0f3H, ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HOBKMAEF@?M?e?j?n?p?p?e?j?r?m?$OA?$PP?5?d?$OA?r?$OA@
CONST	SEGMENT
??_C@_0BC@HOBKMAEF@?M?e?j?n?p?p?e?j?r?m?$OA?$PP?5?d?$OA?r?$OA@ DB 0cdH, 0e5H
	DB	0eaH, 0eeH, 0f0H, 0f0H, 0e5H, 0eaH, 0f2H, 0edH, 0e0H, 0ffH, ' '
	DB	0e4H, 0e0H, 0f2H, 0e0H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05KLMANJHD@?C?n?d?3?5@
CONST	SEGMENT
??_C@_05KLMANJHD@?C?n?d?3?5@ DB 0c3H, 0eeH, 0e4H, ': ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07ONJDPLPB@?L?e?q?$PP?v?3?5@
CONST	SEGMENT
??_C@_07ONJDPLPB@?L?e?q?$PP?v?3?5@ DB 0ccH, 0e5H, 0f1H, 0ffH, 0f6H, ': ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06LMMEPPLN@?D?e?m?$PM?3?5@
CONST	SEGMENT
??_C@_06LMMEPPLN@?D?e?m?$PM?3?5@ DB 0c4H, 0e5H, 0edH, 0fcH, ': ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@IKBFBBFF@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?$OA?x?e?c?n?5?d?m?$PP?5?p?n?f?d?e?m?h@
CONST	SEGMENT
??_C@_0DG@IKBFBBFF@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?$OA?x?e?c?n?5?d?m?$PP?5?p?n?f?d?e?m?h@ DB 0c2H
	DB	0e2H, 0e5H, 0e4H, 0e8H, 0f2H, 0e5H, ' ', 0e4H, 0e0H, 0f2H, 0f3H
	DB	' ', 0e2H, 0e0H, 0f8H, 0e5H, 0e3H, 0eeH, ' ', 0e4H, 0edH, 0ffH
	DB	' ', 0f0H, 0eeH, 0e6H, 0e4H, 0e5H, 0edH, 0e8H, 0ffH, ' ', 0e2H
	DB	' ', 0f4H, 0eeH, 0f0H, 0ecH, 0e0H, 0f2H, 0e5H, ' ', 0c4H, 0c4H
	DB	0ccH, 0ccH, 0c3H, 0c3H, 0c3H, 0c3H, ': ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@GJFPIFCJ@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@
CONST	SEGMENT
??_C@_0CC@GJFPIFCJ@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@ DB 0c2H
	DB	0e2H, 0e5H, 0e4H, 0e8H, 0f2H, 0e5H, ' ', 0e4H, 0e0H, 0f2H, 0f3H
	DB	' ', 0e2H, ' ', 0f4H, 0eeH, 0f0H, 0ecH, 0e0H, 0f2H, 0e5H, ' ', 0c4H
	DB	0c4H, 0ccH, 0ccH, 0c3H, 0c3H, 0c3H, 0c3H, ': ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MNDAKAOL@?$NN?r?n?r?5?c?n?d?5?m?e?5?$PP?b?k?$PP?e?r?q?$PP?5?b?h?q?n?j?n?q?m?$PL?l@
CONST	SEGMENT
??_C@_0CB@MNDAKAOL@?$NN?r?n?r?5?c?n?d?5?m?e?5?$PP?b?k?$PP?e?r?q?$PP?5?b?h?q?n?j?n?q?m?$PL?l@ DB 0ddH
	DB	0f2H, 0eeH, 0f2H, ' ', 0e3H, 0eeH, 0e4H, ' ', 0edH, 0e5H, ' ', 0ffH
	DB	0e2H, 0ebH, 0ffH, 0e5H, 0f2H, 0f1H, 0ffH, ' ', 0e2H, 0e8H, 0f1H
	DB	0eeH, 0eaH, 0eeH, 0f1H, 0edH, 0fbH, 0ecH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@JNNIMEJO@?$NN?r?n?r?5?c?n?d?5?$PP?b?k?$PP?e?r?q?$PP?5?b?h?q?n?j?n?q?m?$PL?l?6@
CONST	SEGMENT
??_C@_0BO@JNNIMEJO@?$NN?r?n?r?5?c?n?d?5?$PP?b?k?$PP?e?r?q?$PP?5?b?h?q?n?j?n?q?m?$PL?l?6@ DB 0ddH
	DB	0f2H, 0eeH, 0f2H, ' ', 0e3H, 0eeH, 0e4H, ' ', 0ffH, 0e2H, 0ebH
	DB	0ffH, 0e5H, 0f2H, 0f1H, 0ffH, ' ', 0e2H, 0e8H, 0f1H, 0eeH, 0eaH
	DB	0eeH, 0f1H, 0edH, 0fbH, 0ecH, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	022H
	DW	042eH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
	DB	023H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	031H
	DW	03faH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 128  :         explicit __CLR_OR_THIS_CALL operator bool() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __EB23CC29_ostream
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 129  :             return _Ok;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]

; 130  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv72 = -217						; size = 1
__Zero_uncaught_exceptions$ = -17			; size = 1
_this$ = -8						; size = 4
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 113  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e4	 lea	 edi, DWORD PTR [ebp-28]
  00010	b9 07 00 00 00	 mov	 ecx, 7
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __EB23CC29_ostream
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 114  : #if !_HAS_EXCEPTIONS
; 115  :             const bool _Zero_uncaught_exceptions = true;
; 116  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 117  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  0002a	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  0002f	0f b6 c0	 movzx	 eax, al
  00032	85 c0		 test	 eax, eax
  00034	75 09		 jne	 SHORT $LN4@sentry
  00036	c6 85 27 ff ff
	ff 01		 mov	 BYTE PTR tv72[ebp], 1
  0003d	eb 07		 jmp	 SHORT $LN5@sentry
$LN4@sentry:
  0003f	c6 85 27 ff ff
	ff 00		 mov	 BYTE PTR tv72[ebp], 0
$LN5@sentry:
  00046	8a 8d 27 ff ff
	ff		 mov	 cl, BYTE PTR tv72[ebp]
  0004c	88 4d ef	 mov	 BYTE PTR __Zero_uncaught_exceptions$[ebp], cl

; 118  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 119  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 120  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 121  : 
; 122  :             if (_Zero_uncaught_exceptions) {

  0004f	0f b6 45 ef	 movzx	 eax, BYTE PTR __Zero_uncaught_exceptions$[ebp]
  00053	85 c0		 test	 eax, eax
  00055	74 14		 je	 SHORT $LN1@sentry

; 123  :                 this->_Myostr._Osfx();

  00057	8b f4		 mov	 esi, esp
  00059	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00064	3b f4		 cmp	 esi, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@sentry:

; 124  :             }
; 125  :         }

  0006b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  0007c	3b ec		 cmp	 ebp, esp
  0007e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Tied$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 96   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d dc	 lea	 edi, DWORD PTR [ebp-36]
  0001e	b9 06 00 00 00	 mov	 ecx, 6
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET __EB23CC29_ostream
  00044	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00049	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00055	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 97   :             if (!_Ostr.good()) {

  0005c	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0005f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00061	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00064	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00067	8b f4		 mov	 esi, esp
  00069	8b ca		 mov	 ecx, edx
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  00071	3b f4		 cmp	 esi, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	0f b6 c0	 movzx	 eax, al
  0007b	85 c0		 test	 eax, eax
  0007d	75 09		 jne	 SHORT $LN2@sentry

; 98   :                 _Ok = false;

  0007f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00082	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 99   :                 return;

  00086	eb 6a		 jmp	 SHORT $LN1@sentry
$LN2@sentry:

; 100  :             }
; 101  : 
; 102  :             const auto _Tied = _Ostr.tie();

  00088	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0008b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00090	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00093	8b f4		 mov	 esi, esp
  00095	8b ca		 mov	 ecx, edx
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  0009d	3b f4		 cmp	 esi, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a4	89 45 e0	 mov	 DWORD PTR __Tied$[ebp], eax

; 103  :             if (!_Tied || _Tied == &_Ostr) {

  000a7	83 7d e0 00	 cmp	 DWORD PTR __Tied$[ebp], 0
  000ab	74 08		 je	 SHORT $LN4@sentry
  000ad	8b 45 e0	 mov	 eax, DWORD PTR __Tied$[ebp]
  000b0	3b 45 08	 cmp	 eax, DWORD PTR __Ostr$[ebp]
  000b3	75 09		 jne	 SHORT $LN3@sentry
$LN4@sentry:

; 104  :                 _Ok = true;

  000b5	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000b8	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1

; 105  :                 return;

  000bc	eb 34		 jmp	 SHORT $LN1@sentry
$LN3@sentry:

; 106  :             }
; 107  : 
; 108  :             _Tied->flush();

  000be	8b f4		 mov	 esi, esp
  000c0	8b 4d e0	 mov	 ecx, DWORD PTR __Tied$[ebp]
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  000c9	3b f4		 cmp	 esi, esp
  000cb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 109  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000d0	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d5	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000d8	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000db	8b f4		 mov	 esi, esp
  000dd	8b ca		 mov	 ecx, edx
  000df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  000e5	3b f4		 cmp	 esi, esp
  000e7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ec	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ef	88 41 04	 mov	 BYTE PTR [ecx+4], al
$LN1@sentry:

; 110  :         }

  000f2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f9	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000fc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ff	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00106	59		 pop	 ecx
  00107	5f		 pop	 edi
  00108	5e		 pop	 esi
  00109	5b		 pop	 ebx
  0010a	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00110	3b ec		 cmp	 ebp, esp
  00112	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00117	8b e5		 mov	 esp, ebp
  00119	5d		 pop	 ebp
  0011a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv72 = -232						; size = 4
__Rdbuf$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 82   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0001e	b9 07 00 00 00	 mov	 ecx, 7
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET __EB23CC29_ostream
  00044	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 83   :             const auto _Rdbuf = _Myostr.rdbuf();

  00049	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004e	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  00054	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR tv72[ebp]
  0005a	8b 02		 mov	 eax, DWORD PTR [edx]
  0005c	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR tv72[ebp]
  00062	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00065	8b f4		 mov	 esi, esp
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0006d	3b f4		 cmp	 esi, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	89 45 e0	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 84   :             if (_Rdbuf) {

  00077	83 7d e0 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  0007b	74 16		 je	 SHORT $LN3@Sentry_bas

; 85   :                 _Rdbuf->_Unlock();

  0007d	8b 45 e0	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  00080	8b 10		 mov	 edx, DWORD PTR [eax]
  00082	8b f4		 mov	 esi, esp
  00084	8b 4d e0	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  00087	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0008a	ff d0		 call	 eax
  0008c	3b f4		 cmp	 esi, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@Sentry_bas:

; 86   :             }
; 87   :         }

  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000a7	3b ec		 cmp	 ebp, esp
  000a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
  000b2	cc		 int	 3
  000b3	cc		 int	 3
  000b4	cc		 int	 3
  000b5	cc		 int	 3
  000b6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv73 = -220						; size = 4
__Rdbuf$ = -20						; size = 4
_this$ = -8						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 75   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e4	 lea	 edi, DWORD PTR [ebp-28]
  00010	b9 07 00 00 00	 mov	 ecx, 7
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __EB23CC29_ostream
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00030	89 08		 mov	 DWORD PTR [eax], ecx

; 76   :             const auto _Rdbuf = _Myostr.rdbuf();

  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 08		 mov	 ecx, DWORD PTR [eax]
  00037	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  0003d	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv73[ebp]
  00043	8b 02		 mov	 eax, DWORD PTR [edx]
  00045	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv73[ebp]
  0004b	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0004e	8b f4		 mov	 esi, esp
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00056	3b f4		 cmp	 esi, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	89 45 ec	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 77   :             if (_Rdbuf) {

  00060	83 7d ec 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  00064	74 16		 je	 SHORT $LN1@Sentry_bas

; 78   :                 _Rdbuf->_Lock();

  00066	8b 45 ec	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  00069	8b 10		 mov	 edx, DWORD PTR [eax]
  0006b	8b f4		 mov	 esi, esp
  0006d	8b 4d ec	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  00070	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00073	ff d0		 call	 eax
  00075	3b f4		 cmp	 esi, esp
  00077	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Sentry_bas:

; 79   :             }
; 80   :         }

  0007c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  00088	3b ec		 cmp	 ebp, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\user\Desktop\ÊÏÎ\lab1òåñò\main.cpp
;	COMDAT _main
_TEXT	SEGMENT
_main	PROC						; COMDAT

; 6    : int main() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __0AFD2000_main@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 7    : 	setlocale(0, "");

  00021	8b f4		 mov	 esi, esp
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00028	6a 00		 push	 0
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__setlocale
  00030	83 c4 08	 add	 esp, 8
  00033	3b f4		 cmp	 esi, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 8    : 	
; 9    : 	number1();

  0003a	e8 00 00 00 00	 call	 ?number1@@YAXXZ		; number1

; 10   : 
; 11   : 	return 0;

  0003f	33 c0		 xor	 eax, eax

; 12   : }

  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx
  00044	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 1010 :     basic_ostream<_Elem, _Traits>& _Ostr) { // insert newline and flush stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __EB23CC29_ostream
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1011 :     _Ostr.put(_Ostr.widen('\n'));

  00021	8b f4		 mov	 esi, esp
  00023	6a 0a		 push	 10			; 0000000aH
  00025	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0002d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00030	8b ca		 mov	 ecx, edx
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00038	3b f4		 cmp	 esi, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b f4		 mov	 esi, esp
  00041	0f b6 c0	 movzx	 eax, al
  00044	50		 push	 eax
  00045	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
  0004e	3b f4		 cmp	 esi, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1012 :     _Ostr.flush();

  00055	8b f4		 mov	 esi, esp
  00057	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  00060	3b f4		 cmp	 esi, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1013 :     return _Ostr;

  00067	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]

; 1014 : }

  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00073	3b ec		 cmp	 ebp, esp
  00075	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\user\Desktop\ÊÏÎ\lab1òåñò\number1.hpp
;	COMDAT ?number1@@YAXXZ
_TEXT	SEGMENT
_dayss$ = -36						; size = 4
_birthday$ = -24					; size = 4
_date$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?number1@@YAXXZ PROC					; number1, COMDAT

; 34   : void number1() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0000f	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	b9 00 00 00 00	 mov	 ecx, OFFSET __1255C25E_number1@hpp
  0002a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 35   : 	int date, birthday, dayss;
; 36   : 
; 37   : 	cout << "Ââåäèòå äàòó â ôîðìàòå ÄÄÌÌÃÃÃÃ: ";

  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@GJFPIFCJ@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@
  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0003f	83 c4 08	 add	 esp, 8

; 38   : 	cin >> date;

  00042	8b f4		 mov	 esi, esp
  00044	8d 45 f4	 lea	 eax, DWORD PTR _date$[ebp]
  00047	50		 push	 eax
  00048	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z
  00054	3b f4		 cmp	 esi, esp
  00056	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 39   : 
; 40   : 	cout << "Ââåäèòå äàòó âàøåãî äíÿ ðîæäåíèÿ â ôîðìàòå ÄÄÌÌÃÃÃÃ: ";

  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@IKBFBBFF@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?$OA?x?e?c?n?5?d?m?$PP?5?p?n?f?d?e?m?h@
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0006b	83 c4 08	 add	 esp, 8

; 41   : 	cin >> birthday;

  0006e	8b f4		 mov	 esi, esp
  00070	8d 45 e8	 lea	 eax, DWORD PTR _birthday$[ebp]
  00073	50		 push	 eax
  00074	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z
  00080	3b f4		 cmp	 esi, esp
  00082	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 42   : 
; 43   : 
; 44   : 
; 45   : 	dayNumber = date / 1000000;

  00087	8b 45 f4	 mov	 eax, DWORD PTR _date$[ebp]
  0008a	99		 cdq
  0008b	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  00090	f7 f9		 idiv	 ecx
  00092	a3 00 00 00 00	 mov	 DWORD PTR ?dayNumber@@3HA, eax ; dayNumber

; 46   : 	monthNumber = (date % 1000000) / 10000;

  00097	8b 45 f4	 mov	 eax, DWORD PTR _date$[ebp]
  0009a	99		 cdq
  0009b	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  000a0	f7 f9		 idiv	 ecx
  000a2	8b c2		 mov	 eax, edx
  000a4	99		 cdq
  000a5	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  000aa	f7 f9		 idiv	 ecx
  000ac	a3 00 00 00 00	 mov	 DWORD PTR ?monthNumber@@3HA, eax ; monthNumber

; 47   : 	yearNumber = date % 10000;

  000b1	8b 45 f4	 mov	 eax, DWORD PTR _date$[ebp]
  000b4	99		 cdq
  000b5	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  000ba	f7 f9		 idiv	 ecx
  000bc	89 15 00 00 00
	00		 mov	 DWORD PTR ?yearNumber@@3HA, edx ; yearNumber

; 48   : 
; 49   : 	dayNumberBirthday = birthday / 1000000;

  000c2	8b 45 e8	 mov	 eax, DWORD PTR _birthday$[ebp]
  000c5	99		 cdq
  000c6	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  000cb	f7 f9		 idiv	 ecx
  000cd	a3 00 00 00 00	 mov	 DWORD PTR ?dayNumberBirthday@@3HA, eax ; dayNumberBirthday

; 50   : 	monthNumberBirthday = (birthday % 1000000) / 10000;

  000d2	8b 45 e8	 mov	 eax, DWORD PTR _birthday$[ebp]
  000d5	99		 cdq
  000d6	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  000db	f7 f9		 idiv	 ecx
  000dd	8b c2		 mov	 eax, edx
  000df	99		 cdq
  000e0	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  000e5	f7 f9		 idiv	 ecx
  000e7	a3 00 00 00 00	 mov	 DWORD PTR ?monthNumberBirthday@@3HA, eax ; monthNumberBirthday

; 51   : 
; 52   : 	cout << "Äåíü: " << dayNumber << endl;

  000ec	8b f4		 mov	 esi, esp
  000ee	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  000f3	8b fc		 mov	 edi, esp
  000f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?dayNumber@@3HA ; dayNumber
  000fa	50		 push	 eax
  000fb	68 00 00 00 00	 push	 OFFSET ??_C@_06LMMEPPLN@?D?e?m?$PM?3?5@
  00100	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00106	51		 push	 ecx
  00107	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0010c	83 c4 08	 add	 esp, 8
  0010f	8b c8		 mov	 ecx, eax
  00111	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00117	3b fc		 cmp	 edi, esp
  00119	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011e	8b c8		 mov	 ecx, eax
  00120	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00126	3b f4		 cmp	 esi, esp
  00128	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 53   : 	cout << "Ìåñÿö: " << monthNumber << endl;

  0012d	8b f4		 mov	 esi, esp
  0012f	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00134	8b fc		 mov	 edi, esp
  00136	a1 00 00 00 00	 mov	 eax, DWORD PTR ?monthNumber@@3HA ; monthNumber
  0013b	50		 push	 eax
  0013c	68 00 00 00 00	 push	 OFFSET ??_C@_07ONJDPLPB@?L?e?q?$PP?v?3?5@
  00141	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00147	51		 push	 ecx
  00148	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0014d	83 c4 08	 add	 esp, 8
  00150	8b c8		 mov	 ecx, eax
  00152	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00158	3b fc		 cmp	 edi, esp
  0015a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015f	8b c8		 mov	 ecx, eax
  00161	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00167	3b f4		 cmp	 esi, esp
  00169	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 54   : 	cout << "Ãîä: " << yearNumber << endl;

  0016e	8b f4		 mov	 esi, esp
  00170	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00175	8b fc		 mov	 edi, esp
  00177	a1 00 00 00 00	 mov	 eax, DWORD PTR ?yearNumber@@3HA ; yearNumber
  0017c	50		 push	 eax
  0017d	68 00 00 00 00	 push	 OFFSET ??_C@_05KLMANJHD@?C?n?d?3?5@
  00182	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00188	51		 push	 ecx
  00189	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0018e	83 c4 08	 add	 esp, 8
  00191	8b c8		 mov	 ecx, eax
  00193	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00199	3b fc		 cmp	 edi, esp
  0019b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a0	8b c8		 mov	 ecx, eax
  001a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  001a8	3b f4		 cmp	 esi, esp
  001aa	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 55   : 	
; 56   : 
; 57   : 
; 58   : 	if (visyear && monthNumber == 2 && yearNumber > 0) {

  001af	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?visyear@@3_NA ; visyear
  001b6	85 c0		 test	 eax, eax
  001b8	74 14		 je	 SHORT $LN2@number1
  001ba	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?monthNumber@@3HA, 2 ; monthNumber
  001c1	75 0b		 jne	 SHORT $LN2@number1
  001c3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?yearNumber@@3HA, 0 ; yearNumber
  001ca	7e 02		 jle	 SHORT $LN2@number1

; 59   : 		
; 60   : 	}

  001cc	eb 66		 jmp	 SHORT $LN3@number1
$LN2@number1:

; 61   : 	else if (dayNumber <= 0 || monthNumber <= 0 || monthNumber > 12 || yearNumber <= 0 || dayNumber > months[monthNumber - 1]) {

  001ce	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?dayNumber@@3HA, 0 ; dayNumber
  001d5	7e 2f		 jle	 SHORT $LN5@number1
  001d7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?monthNumber@@3HA, 0 ; monthNumber
  001de	7e 26		 jle	 SHORT $LN5@number1
  001e0	83 3d 00 00 00
	00 0c		 cmp	 DWORD PTR ?monthNumber@@3HA, 12 ; monthNumber, 0000000cH
  001e7	7f 1d		 jg	 SHORT $LN5@number1
  001e9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?yearNumber@@3HA, 0 ; yearNumber
  001f0	7e 14		 jle	 SHORT $LN5@number1
  001f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?monthNumber@@3HA ; monthNumber
  001f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?dayNumber@@3HA ; dayNumber
  001fd	3b 0c 85 fc ff
	ff ff		 cmp	 ecx, DWORD PTR ?months@@3PAHA[eax*4-4]
  00204	7e 2e		 jle	 SHORT $LN3@number1
$LN5@number1:

; 62   : 		cout << "Íåêîððåêòíàÿ äàòà" << endl;

  00206	8b f4		 mov	 esi, esp
  00208	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0020d	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@HOBKMAEF@?M?e?j?n?p?p?e?j?r?m?$OA?$PP?5?d?$OA?r?$OA@
  00212	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00217	50		 push	 eax
  00218	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0021d	83 c4 08	 add	 esp, 8
  00220	8b c8		 mov	 ecx, eax
  00222	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00228	3b f4		 cmp	 esi, esp
  0022a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 63   : 		return;

  0022f	e9 e6 01 00 00	 jmp	 $LN1@number1
$LN3@number1:

; 64   : 	}
; 65   : 
; 66   : 
; 67   : 	visyears();

  00234	e8 00 00 00 00	 call	 ?visyears@@YAXXZ	; visyears

; 68   : 
; 69   : 	cout << "Ïîðÿäêîâûé íîìåð äíÿ â ãîäó: " << countDay(dayNumber, monthNumber);

  00239	a1 00 00 00 00	 mov	 eax, DWORD PTR ?monthNumber@@3HA ; monthNumber
  0023e	50		 push	 eax
  0023f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?dayNumber@@3HA ; dayNumber
  00245	51		 push	 ecx
  00246	e8 00 00 00 00	 call	 ?countDay@@YAHHH@Z	; countDay
  0024b	83 c4 08	 add	 esp, 8
  0024e	8b f4		 mov	 esi, esp
  00250	50		 push	 eax
  00251	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@CMHEMFCG@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?d?m?$PP?5?b?5?c?n?d?s?3?5@
  00256	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0025c	52		 push	 edx
  0025d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00262	83 c4 08	 add	 esp, 8
  00265	8b c8		 mov	 ecx, eax
  00267	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0026d	3b f4		 cmp	 esi, esp
  0026f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 70   : 
; 71   : 	dayss = countDay(dayNumber, monthNumber);

  00274	a1 00 00 00 00	 mov	 eax, DWORD PTR ?monthNumber@@3HA ; monthNumber
  00279	50		 push	 eax
  0027a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?dayNumber@@3HA ; dayNumber
  00280	51		 push	 ecx
  00281	e8 00 00 00 00	 call	 ?countDay@@YAHHH@Z	; countDay
  00286	83 c4 08	 add	 esp, 8
  00289	89 45 dc	 mov	 DWORD PTR _dayss$[ebp], eax

; 72   : 	birthdaydays = countDay(dayNumberBirthday, monthNumberBirthday);

  0028c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?monthNumberBirthday@@3HA ; monthNumberBirthday
  00291	50		 push	 eax
  00292	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?dayNumberBirthday@@3HA ; dayNumberBirthday
  00298	51		 push	 ecx
  00299	e8 00 00 00 00	 call	 ?countDay@@YAHHH@Z	; countDay
  0029e	83 c4 08	 add	 esp, 8
  002a1	a3 00 00 00 00	 mov	 DWORD PTR ?birthdaydays@@3HA, eax ; birthdaydays

; 73   : 
; 74   : 	if (birthdaydays == dayss) {

  002a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?birthdaydays@@3HA ; birthdaydays
  002ab	3b 45 dc	 cmp	 eax, DWORD PTR _dayss$[ebp]
  002ae	75 2e		 jne	 SHORT $LN6@number1

; 75   : 		cout << "\nÑåãîäíÿ òâîé äåíü ðîæäåíèÿ!" << endl;

  002b0	8b f4		 mov	 esi, esp
  002b2	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  002b7	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@PAPBPJDC@?6?Q?e?c?n?d?m?$PP?5?r?b?n?i?5?d?e?m?$PM?5?p?n?f?d?e?m?h?$PP?$CB@
  002bc	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  002c1	50		 push	 eax
  002c2	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002c7	83 c4 08	 add	 esp, 8
  002ca	8b c8		 mov	 ecx, eax
  002cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  002d2	3b f4		 cmp	 esi, esp
  002d4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 76   : 	}

  002d9	e9 3c 01 00 00	 jmp	 $LN1@number1
$LN6@number1:

; 77   : 	else if (birthdaydays > dayss) {

  002de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?birthdaydays@@3HA ; birthdaydays
  002e3	3b 45 dc	 cmp	 eax, DWORD PTR _dayss$[ebp]
  002e6	7e 61		 jle	 SHORT $LN8@number1

; 78   : 		difference = birthdaydays - dayss;

  002e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?birthdaydays@@3HA ; birthdaydays
  002ed	2b 45 dc	 sub	 eax, DWORD PTR _dayss$[ebp]
  002f0	a3 00 00 00 00	 mov	 DWORD PTR ?difference@@3HA, eax ; difference

; 79   : 		cout << "\nÒâîé äåíü ðîæäåíèÿ ÷åðåç: " << difference << " äíåé" << endl;

  002f5	8b f4		 mov	 esi, esp
  002f7	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  002fc	68 00 00 00 00	 push	 OFFSET ??_C@_05JAEFPJHO@?5?d?m?e?i@
  00301	8b fc		 mov	 edi, esp
  00303	a1 00 00 00 00	 mov	 eax, DWORD PTR ?difference@@3HA ; difference
  00308	50		 push	 eax
  00309	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@FJKONNHN@?6?R?b?n?i?5?d?e?m?$PM?5?p?n?f?d?e?m?h?$PP?5?w?e?p?e?g?3?5@
  0030e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00314	51		 push	 ecx
  00315	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0031a	83 c4 08	 add	 esp, 8
  0031d	8b c8		 mov	 ecx, eax
  0031f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00325	3b fc		 cmp	 edi, esp
  00327	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0032c	50		 push	 eax
  0032d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00332	83 c4 08	 add	 esp, 8
  00335	8b c8		 mov	 ecx, eax
  00337	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0033d	3b f4		 cmp	 esi, esp
  0033f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 80   : 	}

  00344	e9 d1 00 00 00	 jmp	 $LN1@number1
$LN8@number1:

; 81   : 	else if (!visyear) {

  00349	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?visyear@@3_NA ; visyear
  00350	85 c0		 test	 eax, eax
  00352	75 64		 jne	 SHORT $LN10@number1

; 82   : 		difference = 365 - dayss + birthdaydays;

  00354	b8 6d 01 00 00	 mov	 eax, 365		; 0000016dH
  00359	2b 45 dc	 sub	 eax, DWORD PTR _dayss$[ebp]
  0035c	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?birthdaydays@@3HA ; birthdaydays
  00362	a3 00 00 00 00	 mov	 DWORD PTR ?difference@@3HA, eax ; difference

; 83   : 		cout << "\nÒâîé äåíü ðîæäåíèÿ ÷åðåç: " << difference << " äíåé" << endl;

  00367	8b f4		 mov	 esi, esp
  00369	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0036e	68 00 00 00 00	 push	 OFFSET ??_C@_05JAEFPJHO@?5?d?m?e?i@
  00373	8b fc		 mov	 edi, esp
  00375	a1 00 00 00 00	 mov	 eax, DWORD PTR ?difference@@3HA ; difference
  0037a	50		 push	 eax
  0037b	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@FJKONNHN@?6?R?b?n?i?5?d?e?m?$PM?5?p?n?f?d?e?m?h?$PP?5?w?e?p?e?g?3?5@
  00380	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00386	51		 push	 ecx
  00387	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0038c	83 c4 08	 add	 esp, 8
  0038f	8b c8		 mov	 ecx, eax
  00391	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00397	3b fc		 cmp	 edi, esp
  00399	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0039e	50		 push	 eax
  0039f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  003a4	83 c4 08	 add	 esp, 8
  003a7	8b c8		 mov	 ecx, eax
  003a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  003af	3b f4		 cmp	 esi, esp
  003b1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 84   : 	}

  003b6	eb 62		 jmp	 SHORT $LN1@number1
$LN10@number1:

; 85   : 	else {
; 86   : 		difference = 366 - dayss + birthdaydays;

  003b8	b8 6e 01 00 00	 mov	 eax, 366		; 0000016eH
  003bd	2b 45 dc	 sub	 eax, DWORD PTR _dayss$[ebp]
  003c0	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?birthdaydays@@3HA ; birthdaydays
  003c6	a3 00 00 00 00	 mov	 DWORD PTR ?difference@@3HA, eax ; difference

; 87   : 		cout << "\nÒâîé äåíü ðîæäåíèÿ ÷åðåç: " << difference << " äíåé" << endl;

  003cb	8b f4		 mov	 esi, esp
  003cd	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  003d2	68 00 00 00 00	 push	 OFFSET ??_C@_05JAEFPJHO@?5?d?m?e?i@
  003d7	8b fc		 mov	 edi, esp
  003d9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?difference@@3HA ; difference
  003de	50		 push	 eax
  003df	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@FJKONNHN@?6?R?b?n?i?5?d?e?m?$PM?5?p?n?f?d?e?m?h?$PP?5?w?e?p?e?g?3?5@
  003e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  003ea	51		 push	 ecx
  003eb	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  003f0	83 c4 08	 add	 esp, 8
  003f3	8b c8		 mov	 ecx, eax
  003f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  003fb	3b fc		 cmp	 edi, esp
  003fd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00402	50		 push	 eax
  00403	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00408	83 c4 08	 add	 esp, 8
  0040b	8b c8		 mov	 ecx, eax
  0040d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00413	3b f4		 cmp	 esi, esp
  00415	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@number1:

; 88   : 	}
; 89   : }

  0041a	52		 push	 edx
  0041b	8b cd		 mov	 ecx, ebp
  0041d	50		 push	 eax
  0041e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN16@number1
  00424	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00429	58		 pop	 eax
  0042a	5a		 pop	 edx
  0042b	5f		 pop	 edi
  0042c	5e		 pop	 esi
  0042d	5b		 pop	 ebx
  0042e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00431	33 cd		 xor	 ecx, ebp
  00433	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00438	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  0043e	3b ec		 cmp	 ebp, esp
  00440	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00445	8b e5		 mov	 esp, ebp
  00447	5d		 pop	 ebp
  00448	c3		 ret	 0
  00449	0f 1f 00	 npad	 3
$LN16@number1:
  0044c	02 00 00 00	 DD	 2
  00450	00 00 00 00	 DD	 $LN15@number1
$LN15@number1:
  00454	f4 ff ff ff	 DD	 -12			; fffffff4H
  00458	04 00 00 00	 DD	 4
  0045c	00 00 00 00	 DD	 $LN13@number1
  00460	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00464	04 00 00 00	 DD	 4
  00468	00 00 00 00	 DD	 $LN14@number1
$LN14@number1:
  0046c	62		 DB	 98			; 00000062H
  0046d	69		 DB	 105			; 00000069H
  0046e	72		 DB	 114			; 00000072H
  0046f	74		 DB	 116			; 00000074H
  00470	68		 DB	 104			; 00000068H
  00471	64		 DB	 100			; 00000064H
  00472	61		 DB	 97			; 00000061H
  00473	79		 DB	 121			; 00000079H
  00474	00		 DB	 0
$LN13@number1:
  00475	64		 DB	 100			; 00000064H
  00476	61		 DB	 97			; 00000061H
  00477	74		 DB	 116			; 00000074H
  00478	65		 DB	 101			; 00000065H
  00479	00		 DB	 0
?number1@@YAXXZ ENDP					; number1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
tv135 = -308						; size = 8
tv337 = -300						; size = 8
tv323 = -292						; size = 8
tv284 = -292						; size = 8
tv285 = -288						; size = 4
tv137 = -288						; size = 4
$T2 = -280						; size = 4
__Ok$ = -76						; size = 8
__Pad$ = -60						; size = 8
__Count$ = -44						; size = 8
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 766  : basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& _Ostr, const char* _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d 7d 8c	 lea	 edi, DWORD PTR [ebp-116]
  0001e	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002f	33 c5		 xor	 eax, ebp
  00031	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00034	50		 push	 eax
  00035	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00038	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00041	b9 00 00 00 00	 mov	 ecx, OFFSET __EB23CC29_ostream
  00046	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 767  :     // insert NTBS into char stream
; 768  :     using _Elem = char;
; 769  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 770  : 
; 771  :     ios_base::iostate _State = ios_base::goodbit;

  0004b	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 772  :     streamsize _Count        = static_cast<streamsize>(_Traits::length(_Val));

  00052	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
  0005b	83 c4 04	 add	 esp, 4
  0005e	33 c9		 xor	 ecx, ecx
  00060	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  00063	89 4d d8	 mov	 DWORD PTR __Count$[ebp+4], ecx

; 773  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00066	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00069	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006b	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0006e	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00071	8b f4		 mov	 esi, esp
  00073	8b ca		 mov	 ecx, edx
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv323[ebp], eax
  00088	89 95 e0 fe ff
	ff		 mov	 DWORD PTR tv323[ebp+4], edx
  0008e	83 bd e0 fe ff
	ff 00		 cmp	 DWORD PTR tv323[ebp+4], 0
  00095	7c 79		 jl	 SHORT $LN17@operator
  00097	7f 09		 jg	 SHORT $LN24@operator
  00099	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR tv323[ebp], 0
  000a0	76 6e		 jbe	 SHORT $LN17@operator
$LN24@operator:
  000a2	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000a5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a7	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000aa	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000ad	8b f4		 mov	 esi, esp
  000af	8b ca		 mov	 ecx, edx
  000b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000b7	3b f4		 cmp	 esi, esp
  000b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000be	89 85 d4 fe ff
	ff		 mov	 DWORD PTR tv337[ebp], eax
  000c4	89 95 d8 fe ff
	ff		 mov	 DWORD PTR tv337[ebp+4], edx
  000ca	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR tv337[ebp+4]
  000d0	3b 45 d8	 cmp	 eax, DWORD PTR __Count$[ebp+4]
  000d3	7c 3b		 jl	 SHORT $LN17@operator
  000d5	7f 0b		 jg	 SHORT $LN25@operator
  000d7	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR tv337[ebp]
  000dd	3b 4d d4	 cmp	 ecx, DWORD PTR __Count$[ebp]
  000e0	76 2e		 jbe	 SHORT $LN17@operator
$LN25@operator:
  000e2	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000e5	8b 02		 mov	 eax, DWORD PTR [edx]
  000e7	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000ea	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  000ed	8b f4		 mov	 esi, esp
  000ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000f5	3b f4		 cmp	 esi, esp
  000f7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fc	2b 45 d4	 sub	 eax, DWORD PTR __Count$[ebp]
  000ff	1b 55 d8	 sbb	 edx, DWORD PTR __Count$[ebp+4]
  00102	89 85 cc fe ff
	ff		 mov	 DWORD PTR tv135[ebp], eax
  00108	89 95 d0 fe ff
	ff		 mov	 DWORD PTR tv135[ebp+4], edx
  0010e	eb 0b		 jmp	 SHORT $LN18@operator
$LN17@operator:
  00110	0f 57 c0	 xorps	 xmm0, xmm0
  00113	66 0f 13 85 cc
	fe ff ff	 movlpd	 QWORD PTR tv135[ebp], xmm0
$LN18@operator:
  0011b	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR tv135[ebp]
  00121	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR tv135[ebp+4]
  00127	89 4d c4	 mov	 DWORD PTR __Pad$[ebp], ecx
  0012a	89 55 c8	 mov	 DWORD PTR __Pad$[ebp+4], edx

; 774  :     const typename _Myos::sentry _Ok(_Ostr);

  0012d	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00130	50		 push	 eax
  00131	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00134	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00139	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 775  : 
; 776  :     if (!_Ok) {

  00140	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00143	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00148	0f b6 c0	 movzx	 eax, al
  0014b	85 c0		 test	 eax, eax
  0014d	75 0e		 jne	 SHORT $LN8@operator

; 777  :         _State |= ios_base::badbit;

  0014f	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00152	83 c8 04	 or	 eax, 4
  00155	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 778  :     } else { // state okay, insert

  00158	e9 40 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 779  :         _TRY_IO_BEGIN

  0015d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 780  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  00161	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00164	8b 08		 mov	 ecx, DWORD PTR [eax]
  00166	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00169	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0016c	8b f4		 mov	 esi, esp
  0016e	8b ca		 mov	 ecx, edx
  00170	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  00176	3b f4		 cmp	 esi, esp
  00178	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0017d	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00182	83 f8 40	 cmp	 eax, 64			; 00000040H
  00185	0f 84 a3 00 00
	00		 je	 $LN11@operator

; 781  :             for (; 0 < _Pad; --_Pad) { // pad on left

  0018b	eb 12		 jmp	 SHORT $LN4@operator
$LN2@operator:
  0018d	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  00190	83 e8 01	 sub	 eax, 1
  00193	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  00196	83 d9 00	 sbb	 ecx, 0
  00199	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  0019c	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN4@operator:
  0019f	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  001a3	0f 8c 85 00 00
	00		 jl	 $LN11@operator
  001a9	7f 06		 jg	 SHORT $LN26@operator
  001ab	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  001af	76 7d		 jbe	 SHORT $LN11@operator
$LN26@operator:

; 782  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  001b1	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001b4	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b6	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001b9	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001bc	8b f4		 mov	 esi, esp
  001be	8b ca		 mov	 ecx, edx
  001c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  001c6	3b f4		 cmp	 esi, esp
  001c8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001cd	8b f4		 mov	 esi, esp
  001cf	0f b6 c0	 movzx	 eax, al
  001d2	50		 push	 eax
  001d3	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  001d6	8b 11		 mov	 edx, DWORD PTR [ecx]
  001d8	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  001db	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  001de	8b fc		 mov	 edi, esp
  001e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001e6	3b fc		 cmp	 edi, esp
  001e8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001ed	8b c8		 mov	 ecx, eax
  001ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  001f5	3b f4		 cmp	 esi, esp
  001f7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001fc	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv137[ebp], eax
  00202	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv137[ebp]
  00208	50		 push	 eax
  00209	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0020e	50		 push	 eax
  0020f	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00214	83 c4 08	 add	 esp, 8
  00217	0f b6 c8	 movzx	 ecx, al
  0021a	85 c9		 test	 ecx, ecx
  0021c	74 0b		 je	 SHORT $LN12@operator

; 783  :                     _State |= ios_base::badbit; // insertion failed, quit

  0021e	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00221	83 c8 04	 or	 eax, 4
  00224	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 784  :                     break;

  00227	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 785  :                 }
; 786  :             }

  00229	e9 5f ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 787  :         }
; 788  : 
; 789  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  0022e	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  00232	75 64		 jne	 SHORT $LN13@operator
  00234	8b f4		 mov	 esi, esp
  00236	8b 45 d8	 mov	 eax, DWORD PTR __Count$[ebp+4]
  00239	50		 push	 eax
  0023a	8b 4d d4	 mov	 ecx, DWORD PTR __Count$[ebp]
  0023d	51		 push	 ecx
  0023e	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  00241	52		 push	 edx
  00242	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00245	8b 08		 mov	 ecx, DWORD PTR [eax]
  00247	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0024a	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0024d	8b fc		 mov	 edi, esp
  0024f	8b ca		 mov	 ecx, edx
  00251	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00257	3b fc		 cmp	 edi, esp
  00259	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0025e	8b c8		 mov	 ecx, eax
  00260	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  00266	3b f4		 cmp	 esi, esp
  00268	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0026d	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv284[ebp], eax
  00273	89 95 e0 fe ff
	ff		 mov	 DWORD PTR tv284[ebp+4], edx
  00279	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR tv284[ebp]
  0027f	3b 45 d4	 cmp	 eax, DWORD PTR __Count$[ebp]
  00282	75 0b		 jne	 SHORT $LN27@operator
  00284	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR tv284[ebp+4]
  0028a	3b 4d d8	 cmp	 ecx, DWORD PTR __Count$[ebp+4]
  0028d	74 09		 je	 SHORT $LN13@operator
$LN27@operator:

; 790  :             _State |= ios_base::badbit;

  0028f	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00292	83 c8 04	 or	 eax, 4
  00295	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN13@operator:

; 791  :         }
; 792  : 
; 793  :         if (_State == ios_base::goodbit) {

  00298	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  0029c	0f 85 a3 00 00
	00		 jne	 $LN14@operator

; 794  :             for (; 0 < _Pad; --_Pad) { // pad on right

  002a2	eb 12		 jmp	 SHORT $LN7@operator
$LN5@operator:
  002a4	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  002a7	83 e8 01	 sub	 eax, 1
  002aa	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  002ad	83 d9 00	 sbb	 ecx, 0
  002b0	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  002b3	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN7@operator:
  002b6	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  002ba	0f 8c 85 00 00
	00		 jl	 $LN14@operator
  002c0	7f 06		 jg	 SHORT $LN28@operator
  002c2	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  002c6	76 7d		 jbe	 SHORT $LN14@operator
$LN28@operator:

; 795  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  002c8	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002cb	8b 08		 mov	 ecx, DWORD PTR [eax]
  002cd	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002d0	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002d3	8b f4		 mov	 esi, esp
  002d5	8b ca		 mov	 ecx, edx
  002d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  002dd	3b f4		 cmp	 esi, esp
  002df	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002e4	8b f4		 mov	 esi, esp
  002e6	0f b6 c0	 movzx	 eax, al
  002e9	50		 push	 eax
  002ea	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  002ed	8b 11		 mov	 edx, DWORD PTR [ecx]
  002ef	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  002f2	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  002f5	8b fc		 mov	 edi, esp
  002f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  002fd	3b fc		 cmp	 edi, esp
  002ff	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00304	8b c8		 mov	 ecx, eax
  00306	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  0030c	3b f4		 cmp	 esi, esp
  0030e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00313	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv285[ebp], eax
  00319	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv285[ebp]
  0031f	50		 push	 eax
  00320	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00325	50		 push	 eax
  00326	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  0032b	83 c4 08	 add	 esp, 8
  0032e	0f b6 c8	 movzx	 ecx, al
  00331	85 c9		 test	 ecx, ecx
  00333	74 0b		 je	 SHORT $LN15@operator

; 796  :                     _State |= ios_base::badbit; // insertion failed, quit

  00335	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00338	83 c8 04	 or	 eax, 4
  0033b	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 797  :                     break;

  0033e	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 798  :                 }
; 799  :             }

  00340	e9 5f ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 800  :         }
; 801  : 
; 802  :         _Ostr.width(0);

  00345	8b f4		 mov	 esi, esp
  00347	6a 00		 push	 0
  00349	6a 00		 push	 0
  0034b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0034e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00350	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00353	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00356	8b ca		 mov	 ecx, edx
  00358	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  0035e	3b f4		 cmp	 esi, esp
  00360	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00365	eb 26		 jmp	 SHORT $LN19@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 803  :         _CATCH_IO_(ios_base, _Ostr)

  00367	8b f4		 mov	 esi, esp
  00369	6a 01		 push	 1
  0036b	6a 04		 push	 4
  0036d	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00370	8b 08		 mov	 ecx, DWORD PTR [eax]
  00372	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00375	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00378	8b ca		 mov	 ecx, edx
  0037a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00380	3b f4		 cmp	 esi, esp
  00382	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00387	b8 00 00 00 00	 mov	 eax, $LN23@operator
  0038c	c3		 ret	 0
$LN19@operator:
  0038d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00394	eb 07		 jmp	 SHORT $LN9@operator
$LN23@operator:
  00396	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN9@operator:

; 804  :     }
; 805  : 
; 806  :     _Ostr.setstate(_State);

  0039d	8b f4		 mov	 esi, esp
  0039f	6a 00		 push	 0
  003a1	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  003a4	50		 push	 eax
  003a5	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003a8	8b 11		 mov	 edx, DWORD PTR [ecx]
  003aa	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003ad	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  003b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003b6	3b f4		 cmp	 esi, esp
  003b8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 807  :     return _Ostr;

  003bd	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003c0	89 85 e8 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  003c6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  003cd	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  003d0	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  003d5	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 808  : }

  003db	52		 push	 edx
  003dc	8b cd		 mov	 ecx, ebp
  003de	50		 push	 eax
  003df	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN32@operator
  003e5	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  003ea	58		 pop	 eax
  003eb	5a		 pop	 edx
  003ec	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  003ef	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003f6	59		 pop	 ecx
  003f7	5f		 pop	 edi
  003f8	5e		 pop	 esi
  003f9	5b		 pop	 ebx
  003fa	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003fd	33 cd		 xor	 ecx, ebp
  003ff	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00404	81 c4 34 01 00
	00		 add	 esp, 308		; 00000134H
  0040a	3b ec		 cmp	 ebp, esp
  0040c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00411	8b e5		 mov	 esp, ebp
  00413	5d		 pop	 ebp
  00414	c3		 ret	 0
  00415	0f 1f 00	 npad	 3
$LN32@operator:
  00418	01 00 00 00	 DD	 1
  0041c	00 00 00 00	 DD	 $LN31@operator
$LN31@operator:
  00420	b4 ff ff ff	 DD	 -76			; ffffffb4H
  00424	08 00 00 00	 DD	 8
  00428	00 00 00 00	 DD	 $LN29@operator
$LN29@operator:
  0042c	5f		 DB	 95			; 0000005fH
  0042d	4f		 DB	 79			; 0000004fH
  0042e	6b		 DB	 107			; 0000006bH
  0042f	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a c8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-312]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\user\Desktop\ÊÏÎ\lab1òåñò\number1.hpp
;	COMDAT ?visyears@@YAXXZ
_TEXT	SEGMENT
?visyears@@YAXXZ PROC					; visyears, COMDAT

; 23   : void visyears() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __1255C25E_number1@hpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 24   : 	
; 25   : 	if (yearNumber % 4 == 0 && yearNumber % 100 != 0) { 

  00021	a1 00 00 00 00	 mov	 eax, DWORD PTR ?yearNumber@@3HA ; yearNumber
  00026	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0002b	79 05		 jns	 SHORT $LN5@visyears
  0002d	48		 dec	 eax
  0002e	83 c8 fc	 or	 eax, -4			; fffffffcH
  00031	40		 inc	 eax
$LN5@visyears:
  00032	85 c0		 test	 eax, eax
  00034	75 2d		 jne	 SHORT $LN2@visyears
  00036	a1 00 00 00 00	 mov	 eax, DWORD PTR ?yearNumber@@3HA ; yearNumber
  0003b	99		 cdq
  0003c	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00041	f7 f9		 idiv	 ecx
  00043	85 d2		 test	 edx, edx
  00045	74 1c		 je	 SHORT $LN2@visyears

; 26   : 		cout << "Ýòîò ãîä ÿâëÿåòñÿ âèñîêîñíûì\n";

  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@JNNIMEJO@?$NN?r?n?r?5?c?n?d?5?$PP?b?k?$PP?e?r?q?$PP?5?b?h?q?n?j?n?q?m?$PL?l?6@
  0004c	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00057	83 c4 08	 add	 esp, 8

; 27   : 		visyear = true;

  0005a	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?visyear@@3_NA, 1 ; visyear

; 28   : 	}

  00061	eb 13		 jmp	 SHORT $LN1@visyears
$LN2@visyears:

; 29   : 	else {
; 30   : 		cout << "Ýòîò ãîä íå ÿâëÿåòñÿ âèñîêîñíûì\n";

  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@MNDAKAOL@?$NN?r?n?r?5?c?n?d?5?m?e?5?$PP?b?k?$PP?e?r?q?$PP?5?b?h?q?n?j?n?q?m?$PL?l@
  00068	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00073	83 c4 08	 add	 esp, 8
$LN1@visyears:

; 31   : 	}
; 32   : }

  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx
  00079	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0007f	3b ec		 cmp	 ebp, esp
  00081	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
?visyears@@YAXXZ ENDP					; visyears
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\user\Desktop\ÊÏÎ\lab1òåñò\number1.hpp
;	COMDAT ?countDay@@YAHHH@Z
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_days$ = -8						; size = 4
_day$ = 8						; size = 4
_monthNumber$ = 12					; size = 4
?countDay@@YAHHH@Z PROC					; countDay, COMDAT

; 9    : int countDay(int day, int monthNumber) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d e8	 lea	 edi, DWORD PTR [ebp-24]
  0000f	b9 06 00 00 00	 mov	 ecx, 6
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __1255C25E_number1@hpp
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 10   : 	int days = 0;

  00025	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _days$[ebp], 0

; 11   : 	for (int i = 0; i < monthNumber -1; i++)

  0002c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00033	eb 09		 jmp	 SHORT $LN4@countDay
$LN2@countDay:
  00035	8b 45 ec	 mov	 eax, DWORD PTR _i$1[ebp]
  00038	83 c0 01	 add	 eax, 1
  0003b	89 45 ec	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@countDay:
  0003e	8b 45 0c	 mov	 eax, DWORD PTR _monthNumber$[ebp]
  00041	83 e8 01	 sub	 eax, 1
  00044	39 45 ec	 cmp	 DWORD PTR _i$1[ebp], eax
  00047	7d 12		 jge	 SHORT $LN3@countDay

; 12   : 	{
; 13   : 		days += months[i];

  00049	8b 45 ec	 mov	 eax, DWORD PTR _i$1[ebp]
  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _days$[ebp]
  0004f	03 0c 85 00 00
	00 00		 add	 ecx, DWORD PTR ?months@@3PAHA[eax*4]
  00056	89 4d f8	 mov	 DWORD PTR _days$[ebp], ecx

; 14   : 	}

  00059	eb da		 jmp	 SHORT $LN2@countDay
$LN3@countDay:

; 15   : 	days += day;

  0005b	8b 45 f8	 mov	 eax, DWORD PTR _days$[ebp]
  0005e	03 45 08	 add	 eax, DWORD PTR _day$[ebp]
  00061	89 45 f8	 mov	 DWORD PTR _days$[ebp], eax

; 16   : 	if (monthNumber > 2 && visyear) {

  00064	83 7d 0c 02	 cmp	 DWORD PTR _monthNumber$[ebp], 2
  00068	7e 14		 jle	 SHORT $LN5@countDay
  0006a	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?visyear@@3_NA ; visyear
  00071	85 c0		 test	 eax, eax
  00073	74 09		 je	 SHORT $LN5@countDay

; 17   : 		days += 1;

  00075	8b 45 f8	 mov	 eax, DWORD PTR _days$[ebp]
  00078	83 c0 01	 add	 eax, 1
  0007b	89 45 f8	 mov	 DWORD PTR _days$[ebp], eax
$LN5@countDay:

; 18   : 	}
; 19   : 
; 20   : 	return days;

  0007e	8b 45 f8	 mov	 eax, DWORD PTR _days$[ebp]

; 21   : }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0008a	3b ec		 cmp	 ebp, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
?countDay@@YAHHH@Z ENDP					; countDay
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\xstring
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 471  :     _NODISCARD static constexpr int_type eof() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __270D62DC_xstring
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 472  :         return static_cast<int_type>(EOF);

  00021	83 c8 ff	 or	 eax, -1

; 473  :     }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\xstring
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z
_TEXT	SEGMENT
tv65 = -196						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 463  :     _NODISCARD static constexpr bool eq_int_type(const int_type _Left, const int_type _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d fc	 lea	 edi, DWORD PTR [ebp-4]
  0000f	b9 01 00 00 00	 mov	 ecx, 1
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __270D62DC_xstring
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 464  :         return _Left == _Right;

  00025	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00028	3b 45 0c	 cmp	 eax, DWORD PTR __Right$[ebp]
  0002b	75 0c		 jne	 SHORT $LN3@eq_int_typ
  0002d	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv65[ebp], 1
  00037	eb 0a		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  00039	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv65[ebp], 0
$LN4@eq_int_typ:
  00043	0f b6 85 3c ff
	ff ff		 movzx	 eax, BYTE PTR tv65[ebp]

; 465  :     }

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00053	3b ec		 cmp	 ebp, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 385  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __270D62DC_xstring
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 386  :         // find length of null-terminated string
; 387  : #if _HAS_CXX17
; 388  : #ifdef __cpp_char8_t
; 389  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 390  : #if _HAS_U8_INTRINSICS
; 391  :             return __builtin_u8strlen(_First);
; 392  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 393  :             return _Primary_char_traits::length(_First);
; 394  : #endif // ^^^ no u8 intrinsics ^^^
; 395  :         } else
; 396  : #endif // defined(__cpp_char8_t)
; 397  :         {
; 398  :             return __builtin_strlen(_First);
; 399  :         }
; 400  : #else // ^^^ _HAS_CXX17 / !_HAS_CXX17 vvv
; 401  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00021	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _strlen
  0002a	83 c4 04	 add	 esp, 4

; 402  : #endif // ^^^ !_HAS_CXX17 ^^^
; 403  :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\user\Desktop\ÊÏÎ\lab1òåñò\main.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __0AFD2000_main@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\user\Desktop\ÊÏÎ\lab1òåñò\main.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __0AFD2000_main@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
